DAY1:

OvertheWire Bandit challenges 1-20:

sudo su root to give root privileges

//ssh
ssh bandit01@bandit.labs.overthewire.org -p 2220
ssh bandit01@bandit.labs.overthewire.org -p 2220 cat readme //u can type like this also if it doesnt allow u to login but u want to access stuff
exit to exit from ssh
ctrl + c to terminate process

//basic commands
ls, cat, cd, cat ./-, cat 'file with spaces in name', ls -a
find -readable -nc -owner bandit6 -group bandit7
cp and mv to copy and move files
echo is to print 

//piping
cat data.txt | grep "millionth" >> newfile.txt  //output is redirected to newfile
cat data.txt | sort | uniq -u
strings data.txt | grep ===  //for human readable form strings is used

//decoding basics
cat data.txt base64 -d //base64 decoding  -e =>encoding
alias rot13="tr 'A-Za-z' 'N-ZA-Mn-za-m'"
cat data.txt | rot13

//scp, netcat and ssl
scp->to transfer data over ssh
scp -P 2220 bandit13@bandit.labs.overthewire.org:sshkey.private .   
ssh -i sshkey.private bandit14@bandit.labs.overthewire.org -p 2220  //to login using private ssh key into ssh
chmod 700 sshkey.private makes sure onli users have permission
ls -l filename tells abt permissions

//netcat
netcat or nc is used to read or write data over a network
nc localhost 30000

//ssl
ssl is for secure communication over networks
echo JQttfApK4SeyHwDlI9SXGR50qclOAil1 | openssl s_client -ign_eof -connect localhost:31790

//port scanning
nmap: to see which ports are open by default scans top 1000 ports
nmap -sV localhost -p 31000-32000
-p is which port or range -sV is for version and service detection -p- -A is to scan all ports 
will take time..here we are finding which ssl port can send back password

//difference in two files
diff file1 file2


DAY2:

Revised concepts that I had learnt in TCM Security PEH course:

Networking, addresses, OSI Model, protocols, Subnetting
Intro to python: basic printing, variables, functions, operators and expressions, list, tuple, dictionaries, loops, importing modules
Sockets, building basic port scanner
Basic Linux commands: sudo, mmkdir, rmdir, cd, ls, echo, cp, rm, mv, users and privileges, changing permissions, network commands, cat, nano, installing and updating tools
Bash scripting very basic program
5 stages of Ethical Hacking: Info gathering, Scanning and Enumeration, Exploitation, Maintaining Access, Covering Tracks

//Info Gathering steps:
Passive Reconnaissance Overview
Identifying Target
Discovering emails
Gathering Breached Credentials
Hunting Breached Credentials with Dehashed
Hunting Subdomains
Identifying website tech



DAY3:

//netcat
netcat or nc 
-l is needed to create a listener on server
-p to speify port 
& operator to run command in background
-n to avoid new line stuff
echo -n 'GbKksEFF4yrVs6il55v6gwY5aVje5f0j' | nc -l -p 1234 & //this sends the passwd to listener on localhost port 1234 and it compares with passwd of prev lvl ,
if right it send new passwd ..  type.. ./suconnect 1234

//cron
cron is a time based job scheduler that executes commands at regular intervals chack config in /etc/cron.d
ls -la /etc/cron.d
go to bandit 22 bash script open it using cat /usr/bin/cronjob_bandit22.sh and execute those commands

//cron
bash files end with .sh and are always stored in /usr/bin/filename
mktemp -d makes temporary directory

stuck!:( in level 24

PicoCTFs-completed 7 basic challenges mostly general track 
//downloading n checking file types
wget http link to get files from net
./filename -h if it is 64 bit elf executable file no need to to do cat also ull find file type when u do file filename command

//Stegenography:
file filename to check extension
binwalk filename to check if hidden files are there
strings cat.jpg | grep picoCTF{* to check if that thing is present in file
hexdump -C cat.jpg gives content in hexadecimal format
echo cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9 | base64 -d //does base 64 encoding
identify -verbose image.png , exif cat.jpg
install imagemagick and exif tools
use hexidor like hexer to convert hexadecimal data to text and then decode the text

//decoding using a script in python
python3 ende.py -d flag.txt.en
and then enter password to decode flag using python script

strings static | grep pico //extracts and separates strings and human readable data from binary data

//hexadecimal to ascii : echo 0x70 | xxd -r
//pdf to txt
sudo apt-get install poppler-utils
pdftotext hp-manual.pdf hp-manual.txt


DAY4 :
Completed 26 general challenges in picoCTF

DAY5:

Learn about OSINT[Open Source Intelligence]:
gathering publicly available sources of information about a particular target an attacker
Without actively engaging the target, the attacker can use the intelligence produced to build a threat model and develop a plan of attack.
did course from Basel Institute of Governance

DAY6:

Learnt Bash Scripting
Bash is a scripting language that runs within the terminal on most Linux distros
Shell scripts are a sequence of bash commands within a file, combined together to achieve more complex tasks than simple one-liner and 
are especially useful when it comes to automating sysadmin tasks such as backups
#!/bin/bash
echo to print
u can run normal linux commands also
Chmod +x yourfile.sh //to give permission to execute
run it using ./filename.sh
# to write commands

to use variables:
name="jammy" //no spaces b/w =
echo $jammy

bash -x ./file.sh  //to debug..if line precedes with + it is right else if - it has error
insert set -x into your script and set +x to debug a part of it

parameters:
name=$1
echo $name ..outputs first parameter ..if $2..outputs 2nd parameter
read name..echo $name
$0 gives filename, $# gives no of arguements

arrays:
transport=('car' 'train' 'bike' 'bus')
echo "${transport[@]}" //all ele
echo "${transport[1]}"
unset transport[1]   //to change or delete an element
transport[1]='trainride'

conditionals:
count=10
if [ count -eq 10 ]     //-eq is equal you can use norml = also
then                      -gt is greater than ..like that to check conditions
echo "equal to 10"        -ne is not equal to
else
echo "nope"
fi

to read and write files:   //-f to chk if file exists, -w to check if it is writabel, -r to check it it is readable
if [ -f "filename" ] && [ -w "filename" ]
then
echo "hello" > $filename
else
touch "$filename"
echo "hello" > $filename
fi

some more linux xD:
ps to see processes running(shows only system processes)
ps aux to see user processes also
top to get realtime statistics  
kill 1337 ..kills that particular process
echo "hi thm" & //makes this process run in bg or use ctrl+z to do it
fg to get it to foreground
systemctl stop myservice  //to start n stop services on booting
systemctl start myservice

Regular Expressions:
Regular expressions (or Regex) are patterns of text that you define to search documents and match exactly what you're looking for
egrep <pattern> <file> ..to search regexp pattern in a file
[abc] will match a, b, and c (every occurrence of each letter) or [a-c]zz
[abc]zz will match azz, bzz, and czz.
[a-cx-z]zz will match azz, bzz, czz, xzz, yzz, and zzz. //combining ranges
[^k]ing will match ring, sing, $ing, but not king.
[^a-c]at will match fat and hat, but not bat or cat.

a.c //. can be any char
actual dot hudukbekandre use a\.c  //only searches for a.c
cats? andre s may or may not be present cat, cats both are shown

\d matches a digit, like 9
\D matches a non-digit, like A or @
\w matches an alphanumeric character, like a or 3
\W matches a non-alphanumeric character, like ! or #
\s matches a whitespace character (spaces, tabs, and line breaks)
\S matches everything else (alphanumeric characters and symbols)

{12} - exactly 12 times.
{1,5} - 1 to 5 times.
{2,} - 2 or more times.
* - 0 or more times.
+ - 1 or more times.

^ - starts with
$ - ends with
I use (nano|vim) ..or operator






